{"version":3,"sources":["components/Header.jsx","utils/time.js","utils/http.js","services/hackerNewsData.js","components/HackerNewsElements/NewsItem.jsx","components/HackerNewsElements/Pagination.jsx","components/HackerNewsElements/index.jsx","components/HackerNewsElements/NewsItemComment.jsx","components/HackerNewsElements/NewsItemDetail.jsx","components/AppRouter.jsx","components/Home.jsx","serviceWorker.js","index.js"],"names":["Header","className","to","title","getDifferenceInTime","unixTime","getCurrentUnixTime","minutes","Math","floor","hours","days","Date","getTime","http","axios","create","baseURL","headers","get","endpoint","a","data","console","log","getAllData","ids","getNewsItem","newsId","item","NewsItem","newsItemId","React","useState","isdataLoading","setLoadingStatus","newsItemData","setNewsItemData","loadingState","useEffect","pathname","id","state","score","by","time","Pagination","props","newsIds","itemsInView","paginationSlots","setPaginationSlot","pageIndex","setPageIndex","sortedObj","index","groupedArray","forEach","value","idx","sortToObj","isLastPage","Object","keys","length","map","key","onClick","NewsDashboard","updateNewsIds","isDataFetching","setDataFetchingStatus","fetchAllData","NewsItemComment","commentId","commentData","setCommentData","isDataLoading","setDataLoadingStatus","text","dangerouslySetInnerHTML","__html","sanitize","kids","kid","NewsItemDetail","location","href","url","target","rel","AppRouter","exact","path","render","component","Home","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92498c8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <div className=\"header container\">\r\n      <div className=\"col-left\">\r\n        <h1 className=\"header__main-header\">\r\n          <Link to=\"/news-feed\" title=\"home\">\r\n            hackernewsUI\r\n          </Link>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","/**\r\n *\r\n * Gets difference in time in words from given unix time to the current time\r\n *\r\n * @param {number} unixTime\r\n *\r\n * @returns {string}\r\n */\r\n\r\nexport function getDifferenceInTime(unixTime) {\r\n  if (!unixTime || unixTime > getCurrentUnixTime()) {\r\n    return 'N/A';\r\n  }\r\n\r\n  const minutes = Math.floor((getCurrentUnixTime() - unixTime) / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (days > 30) {\r\n    return `${hours} month(s) ago`;\r\n  } else if (hours > 24) {\r\n    return `${days} day(s) ago`;\r\n  } else if (minutes > 60) {\r\n    return `${hours} hour(s) ago`;\r\n  } else if (minutes > 1) {\r\n    return `${minutes} minutes ago`;\r\n  } else {\r\n    return 'less than a minute ago';\r\n  }\r\n}\r\n\r\nexport const getCurrentUnixTime = () => Math.floor(new Date().getTime() / 1000.0);\r\n","import axios from 'axios';\r\n\r\nexport const http = axios.create({\r\n  baseURL: 'https://hacker-news.firebaseio.com/v0',\r\n  headers: {\r\n    'content-type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const get = async (endpoint) => {\r\n  try {\r\n    const data = await http.get(endpoint);\r\n    return data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n","import { get } from '../utils/http';\r\n\r\n/**\r\n *  Gets all the top news id\r\n *  @params {string} endpoint is provided as param\r\n *\r\n *  @returns {data[]} Contains all the top stories id in a array\r\n */\r\n\r\nexport const getAllData = async () => {\r\n  const ids = await get('/topstories.json?print=pretty');\r\n  if (!ids) {\r\n    return console.log('empty');\r\n  }\r\n\r\n  return ids;\r\n};\r\n\r\nexport const getNewsItem = async (newsId) => {\r\n  const item = await get(`/item/${newsId}.json?print+pretty`);\r\n\r\n  if (!item) {\r\n    return console.log('empty');\r\n  }\r\n  return item;\r\n};\r\n\r\n// export const getAllData = () =>\r\n//   http\r\n//     .get('/topstories.json?print=pretty')\r\n//     .then((data) => {\r\n//       console.log(data.data.length, data.data);\r\n//       sortToObj(data.data);\r\n//     })\r\n//     .catch((err) => console.log(err));\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { getDifferenceInTime } from '../../utils/time';\r\nimport { getNewsItem } from '../../services/hackerNewsData';\r\n\r\nconst NewsItem = ({ newsItemId }) => {\r\n  const [isdataLoading, setLoadingStatus] = React.useState(false);\r\n  const [newsItemData, setNewsItemData] = React.useState(null);\r\n\r\n  const loadingState = (\r\n    <li className=\"list__item preloader-block\">\r\n      <div className=\"preloader-block__content\" />\r\n      <div className=\"preloader-block__content sm mt--5\" />\r\n    </li>\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      setLoadingStatus(true);\r\n      const data = await getNewsItem(newsItemId);\r\n      setNewsItemData(data.data);\r\n      setLoadingStatus(false);\r\n    })();\r\n  }, [newsItemId]);\r\n\r\n  return (\r\n    <>\r\n      {isdataLoading\r\n        ? loadingState\r\n        : newsItemData && (\r\n            <li className=\"list__item\">\r\n              <Link\r\n                to={{\r\n                  pathname: `/news-feed/${newsItemData.id}`,\r\n                  state: { newsItemData },\r\n                }}\r\n              >\r\n                <h2 className=\"text--header\">{newsItemData.title}</h2>\r\n                <div className=\"text--secondary\">\r\n                  Score: <span className=\"separator\">{newsItemData.score}</span>\r\n                  By: <span className=\"separator\">{newsItemData.by} </span>\r\n                  {getDifferenceInTime(newsItemData.time)}\r\n                </div>\r\n              </Link>\r\n            </li>\r\n          )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsItem;\r\n","import React from 'react';\r\n\r\nimport NewsItem from './NewsItem';\r\n\r\nconst Pagination = (props) => {\r\n  const { newsIds, itemsInView } = props;\r\n  const [paginationSlots, setPaginationSlot] = React.useState(null);\r\n  const [pageIndex, setPageIndex] = React.useState(0);\r\n\r\n  /**\r\n   *  This function takes in array of ids\r\n   *  and returns sortedObject\r\n   *\r\n   *  {[index]: [groupedArrays]}\r\n   *\r\n   * @param {array} data[]\r\n   *\r\n   * @returns {object}\r\n   */\r\n\r\n  function sortToObj(data) {\r\n    let sortedObj = {};\r\n    let index = 0;\r\n    let groupedArray = [];\r\n\r\n    data.forEach((value, idx) => {\r\n      if (idx % itemsInView === 0 && idx !== 0) {\r\n        groupedArray = [];\r\n        index++;\r\n      }\r\n\r\n      groupedArray = [...groupedArray, value];\r\n      sortedObj = { ...sortedObj, [index]: [...groupedArray] };\r\n    });\r\n\r\n    return sortedObj;\r\n  }\r\n\r\n  React.useEffect(() => setPaginationSlot(sortToObj(newsIds)), [newsIds]);\r\n\r\n  const isLastPage = !!paginationSlots && pageIndex === Object.keys(paginationSlots).length - 1;\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"pagination list list--news-feed\">\r\n        {!!paginationSlots &&\r\n          paginationSlots[pageIndex].map((value, index) => <NewsItem key={index} newsItemId={value} />)}\r\n      </ul>\r\n      <div className=\"pagination__action-bar\">\r\n        {!!pageIndex && <button className=\"btn-left-arrow\" onClick={() => setPageIndex(pageIndex - 1)} />}\r\n        <div className=\"circular-index\">{pageIndex + 1}</div>\r\n        {!isLastPage ? <button className=\"btn-right-arrow\" onClick={() => setPageIndex(pageIndex + 1)} /> : <></>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\n\r\nimport Pagination from './Pagination';\r\nimport { getAllData } from '../../services/hackerNewsData';\r\n\r\nconst loadingState = (\r\n  <div className=\"flex-wrapper flex-wrapper--ctr empty-state\">\r\n    <div className=\"loader-wrapper\">\r\n      <div className=\"loader\" />\r\n    </div>\r\n    <div className=\"text--secondary\">Loading Feed</div>\r\n  </div>\r\n);\r\n\r\nconst NEWS_ITEMS_IN_VIEW = 10;\r\nconst NewsDashboard = () => {\r\n  const [newsIds, updateNewsIds] = React.useState([]);\r\n  const [isDataFetching, setDataFetchingStatus] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    async function fetchAllData() {\r\n      setDataFetchingStatus(true);\r\n      const data = await getAllData();\r\n      updateNewsIds(data.data);\r\n      setDataFetchingStatus(false);\r\n    }\r\n\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  if (isDataFetching) {\r\n    return loadingState;\r\n  }\r\n\r\n  return <Pagination newsIds={newsIds} itemsInView={NEWS_ITEMS_IN_VIEW} />;\r\n};\r\n\r\nexport default NewsDashboard;\r\n","import React from 'react';\r\nimport { sanitize } from 'dompurify';\r\n\r\nimport { getDifferenceInTime } from '../../utils/time';\r\nimport { getNewsItem } from '../../services/hackerNewsData';\r\n\r\nconst NewsItemComment = ({ commentId }) => {\r\n  const [commentData, setCommentData] = React.useState(null);\r\n  const [isDataLoading, setDataLoadingStatus] = React.useState(false);\r\n\r\n  const loadingState = (\r\n    <li className=\"list__item\">\r\n      <div className=\"comment-block preloader-block\">\r\n        <div className=\"preloader-block__content sm\" />\r\n        <div className=\"preloader-block__content comment-block__comment\" />\r\n      </div>\r\n    </li>\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    (async function fetchComment() {\r\n      setDataLoadingStatus(true);\r\n      const data = await getNewsItem(commentId);\r\n      setDataLoadingStatus(false);\r\n      setCommentData(data.data);\r\n    })();\r\n  }, [commentId]);\r\n\r\n  console.log(commentData && commentData.time);\r\n\r\n  return (\r\n    <>\r\n      {isDataLoading\r\n        ? loadingState\r\n        : commentData &&\r\n          commentData.text && (\r\n            <li className=\"list__item\">\r\n              <div className=\"comment-block\">\r\n                <div className=\"text--secondary\">\r\n                  <span className=\"separator text--bold\">{commentData.by}</span>\r\n                  <span>{getDifferenceInTime(commentData.time)}</span>\r\n                </div>\r\n                <div\r\n                  className=\"comment-block__comment\"\r\n                  dangerouslySetInnerHTML={{ __html: sanitize(commentData.text) }}\r\n                />\r\n              </div>\r\n\r\n              {commentData.kids && (\r\n                <ul className=\"list list--comment-feed\">\r\n                  {commentData.kids.map((kid, idx) => (\r\n                    <NewsItemComment key={`news-comment-${kid}`} commentId={kid} />\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </li>\r\n          )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsItemComment;\r\n","import React from 'react';\r\nimport NewsItemComment from './NewsItemComment';\r\n\r\nconst NewsItemDetail = (props) => {\r\n  React.useEffect(() => {\r\n    if (!props.location || !props.location.state || !props.location.state.newsItemData) {\r\n      return;\r\n    }\r\n\r\n    setNewsItemData(props.location.state.newsItemData);\r\n  }, [props.location]);\r\n\r\n  const [newsItemData, setNewsItemData] = React.useState('');\r\n\r\n  return (\r\n    <>\r\n      {newsItemData && (\r\n        <>\r\n          <h2 className=\"text--header text--lg\">\r\n            <a\r\n              className=\"newsItem__header\"\r\n              href={newsItemData.url}\r\n              target=\"_blank\"\r\n              title={newsItemData.url}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {newsItemData.title}\r\n            </a>\r\n          </h2>\r\n          <h3 className=\"text--header text--md mx--30\">Comments</h3>\r\n          <ul className=\"list list--comment-feed\">\r\n            {newsItemData.kids && !!newsItemData.kids.length ? (\r\n              newsItemData.kids.map((kid) => <NewsItemComment key={`news-comment-${kid}`} commentId={kid} />)\r\n            ) : (\r\n              <div className=\"text--secondary\">No comments found</div>\r\n            )}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsItemDetail;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport NewsDashboard from './HackerNewsElements';\r\nimport NewsItemDetail from './HackerNewsElements/NewsItemDetail';\r\n\r\nconst AppRouter = () => (\r\n  <main className=\"main-content container\">\r\n    <div className=\"col-mid col-mid--dashboard\">\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/news-feed\" />} />\r\n        <Route path=\"/news-feed/:id\" component={NewsItemDetail} />\r\n        <Route path=\"/news-feed\" component={NewsDashboard} />\r\n      </Switch>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\n\r\nimport Header from './Header';\r\nimport AppRouter from './AppRouter';\r\n\r\nconst Home = () => (\r\n  <>\r\n    <Header />\r\n    <AppRouter />\r\n  </>\r\n);\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './assets/sass/style.css';\r\nimport Home from './components/Home';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Home />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}